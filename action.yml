---
name: mcvs-golang-action
description: |
  The Mission Critical Vulnerability Scanner (MCVS) Golang action.
inputs:
  code_coverage_expected:
    default: "80"
    description: |
      The minimum code coverage.
  gci:
    default: "true"
    description: |
      Whether to check gci. Disable if the project provides an alternative way.
  golang-unit-tests-exclusions:
    default: " "
    description: |
      The Golang paths that should be excluded from unit testing.
  golangci-lint-version:
    default: v1.55.2
    description: |
      The Golangci-lint version that has to be installed and used.
  golang-number-of-tests-in-parallel:
    description: |
      Number of test in parallel.
  testing-type:
    description: |
      The testing type, e.g. integration, unit or some other.
  trivy-action-db:
    default: "ghcr.io/aquasecurity/trivy-db:2"
    description: |
      OCI repository to retrieve trivy-db from.
  trivy-action-java-db:
    description: |
      OCI repository to retrieve trivy-java-db from.
    default: "ghcr.io/aquasecurity/trivy-java-db:1"
  token:
    description: |
      A token is required to allow the mcvs-golang-action to pull the
      cached trivy DBs to prevent bump into pull rate limits.
    required: true
runs:
  using: "composite"
  steps:
    #
    # YAML linting.
    #
    - run: |
        pip install --user yamllint==1.35.1
        yamllint -d '{extends: default, rules: {comments: {min-spaces-from-content: 1}}}' .
      if: inputs.testing-type == 'lint'
      shell: bash
    #
    # Install the golang version that has been defined in the go.mod file.
    #
    # yamllint disable rule:line-length
    - uses: actions/setup-go@v5.0.2
      if: inputs.testing-type == 'component' || inputs.testing-type == 'coverage' || inputs.testing-type == 'integration' || inputs.testing-type == 'unit'
      with:
        go-version-file: "go.mod"
        cache: false
    # yamllint enable rule:line-length
    #
    # Verify downloaded dependencies.
    #
    - name: verify golang modules
      if: inputs.testing-type == 'security-golang-modules'
      shell: bash
      run: |
        go mod verify
    - uses: golang/govulncheck-action@v1.0.4
      with:
        go-version-file: go.mod
        go-package: ./...
    #
    # Check for 'incorrect import order', let pipeline fail if true and provide
    # instruction to remediate it. Note: check is included in golangci-lint,
    # but it does not provide clarity how to resolve it when positive.
    #
    - name: gci
      if: inputs.gci == 'true' && inputs.testing-type == 'lint'
      shell: bash
      run: |
        go install github.com/daixiang0/gci@v0.13.4
        if ~/go/bin/gci list --skip-generated . | grep "\.go$"; then
          echo "One or more golang files detected with: 'incorrect import order':"
          echo " * Observe: '~/go/bin/gci diff --skip-generated .'"
          echo " * Resolve: '~/go/bin/gci write --skip-generated .'"
          exit 1
        fi
    #
    # Code security scanning.
    #
    # * Grype
    #
    - uses: anchore/scan-action@v5.1.0
      if: inputs.token != '' && inputs.testing-type == 'security-grype'
      with:
        only-fixed: false
        output-format: table
        path: "."
        severity-cutoff: high
    #
    # * Trivy
    #
    - uses: 030/trivyignore-validator-action@v0.1.2
      if: inputs.token != '' && inputs.testing-type == 'security-trivy'
    - name: Log in to GitHub Packages Docker registry
      if: inputs.token != '' && inputs.testing-type == 'security-trivy'
      shell: bash
      run: |
        echo "${{ inputs.token }}" |\
          docker login ghcr.io -u ${{ github.actor }} --password-stdin
    #
    # Duplicated trivy-action parameters as GitHub actions do NOT support
    # anchors: https://github.com/actions/runner/issues/1182
    #
    - uses: aquasecurity/trivy-action@0.28.0
      if: inputs.token != '' && inputs.testing-type == 'security-trivy'
      env:
        TRIVY_DB_REPOSITORY: ${{ inputs.trivy-action-db }}
        TRIVY_JAVA_DB_REPOSITORY: ${{ inputs.trivy-action-java-db }}
        TRIVY_PASSWORD: ${{ inputs.token }}
        TRIVY_USERNAME: ${{ github.actor }}
      with:
        scan-type: "fs"
        scan-ref: "."
        exit-code: "1"
        ignore-unfixed: true
        severity: "CRITICAL,HIGH"
        trivyignores: .trivyignore
    - uses: aquasecurity/trivy-action@0.28.0
      if: inputs.token == '' && inputs.testing-type == 'security-trivy'
      env:
        TRIVY_DB_REPOSITORY: ${{ inputs.trivy-action-db }}
        TRIVY_JAVA_DB_REPOSITORY: ${{ inputs.trivy-action-java-db }}
      with:
        scan-type: "fs"
        scan-ref: "."
        exit-code: "1"
        ignore-unfixed: true
        severity: "CRITICAL,HIGH"
        trivyignores: .trivyignore
    #
    # Run golangci-lint.
    #
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6.1.1
      if: inputs.testing-type == 'lint'
      with:
        args: |-
          --enable-all \
          --out-format=colored-line-number \
          --timeout 2m30s \
          -v
        version: ${{ inputs.golangci-lint-version }}
    #
    # Unit tests.
    #
    - name: unit tests
      if: inputs.testing-type == 'unit'
      shell: bash
      run: |
        ${GITHUB_ACTION_PATH}/src/go-test.sh \
          "" \
          "" \
          "${{ inputs.golang-number-of-tests-in-parallel }}" \
          "${{ inputs.golang-unit-tests-exclusions }}" \
          ""
    #
    # Integration tests.
    #
    - name: integration tests
      if: inputs.testing-type == 'integration'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        ${GITHUB_ACTION_PATH}/src/go-test.sh \
          "" \
          "" \
          "${{ inputs.golang-number-of-tests-in-parallel }}" \
          "${{ inputs.golang-unit-tests-exclusions }}" \
          "integration"
    #
    # Coverage.
    #
    - name: code coverage
      if: inputs.testing-type == 'coverage'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        ${GITHUB_ACTION_PATH}/src/go-test.sh \
          "./..." \
          "profile.cov" \
          "${{ inputs.golang-number-of-tests-in-parallel }}" \
          "${{ inputs.golang-unit-tests-exclusions }}" \
          "integration"

        code_coverage_output=$(go tool cover -func profile.cov)
        code_coverage_actual=$(echo "${code_coverage_output}" |\
          grep total: |\
          awk '{print $3}' |\
          sed 's/%//')

        echo "Code coverage overview:"
        echo "${code_coverage_output}"

        if (( $(echo "${{ inputs.code_coverage_expected }} > ${code_coverage_actual}" | bc -l) )); then
          echo "The actual code coverage: '${code_coverage_actual}' is too low. Expected: '${{ inputs.code_coverage_expected }}'."
          exit 1
        elif (( $(echo "${code_coverage_actual} > ${{ inputs.code_coverage_expected }}" | bc -l) )); then
          echo "The actual code coverage: '${code_coverage_actual}' exceeds the expected coverage. Please adjust the threshold to align with the expected: '${{ inputs.code_coverage_expected }}'."
          exit 1
        fi
    #
    # Component tests.
    #
    - name: component tests
      if: inputs.testing-type == 'component'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        ${GITHUB_ACTION_PATH}/src/go-test.sh \
          "" \
          "" \
          "${{ inputs.golang-number-of-tests-in-parallel }}" \
          "${{ inputs.golang-unit-tests-exclusions }}" \
          "component"
