---
name: mcvs-golang-action
description: |
  The Mission Critical Vulnerability Scanner (MCVS) Golang action.
inputs:
  build-tags:
    description: "What kind of code should be checked, e.g. component, e2e"
  code-coverage-expected:
    default: "80"
    description: |
      The minimum code coverage.
  gci:
    default: "true"
    description: |
      Whether to check gci. Disable if the project provides an alternative way.
  github-token-for-downloading-private-go-modules:
    description: |
      Whether private go modules have to be downloaded.
  golang-unit-tests-exclusions:
    default: " "
    description: |
      The Golang paths that should be excluded from unit testing.
  task-version:
    default: v3.39.2
    description: |
      The Task version that has to be installed and used.
  testing-type:
    description: |
      The testing type, e.g. integration, unit or some other.
  token:
    description: |
      A token is required to allow the mcvs-golang-action to pull the
      cached trivy DBs to prevent bump into rate limits.
  trivy-action-db:
    default: "public.ecr.aws/aquasecurity/trivy-db:2"
    description: |
      OCI repository to retrieve trivy-db from.
  trivy-action-java-db:
    default: "public.ecr.aws/aquasecurity/trivy-java-db:1"
    description: |
      OCI repository to retrieve trivy-java-db from.
  golangci-timeout:
    default: "3"
    description: |
      Timeout for total work. If <= 0, the timeout is disabled (default 3m0s)
  test-timeout:
    default: "6m0s"
    description: |
      Timeout for total work.
runs:
  using: "composite"
  steps:
    #
    # Install task and the golang version that has been defined in the go.mod
    # file.
    #
    - uses: actions/setup-go@v5.3.0
      if: |
        inputs.testing-type == 'component' ||
        inputs.testing-type == 'coverage' ||
        inputs.testing-type == 'integration' ||
        inputs.testing-type == 'lint' ||
        inputs.testing-type == 'unit'
      with:
        go-version-file: "go.mod"
        cache: false
    - name: install task
      if: |
        inputs.testing-type == 'component' ||
        inputs.testing-type == 'coverage' ||
        inputs.testing-type == 'integration' ||
        inputs.testing-type == 'lint' ||
        inputs.testing-type == 'mcvs-texttidy' ||
        inputs.testing-type == 'unit'
      shell: bash
      run: |
        if ! task --version | grep -q "Task version: ${{ inputs.task-version }}"; then
          major_version=$(echo "${{ inputs.task-version }}" | sed -E 's/^v([0-9]+).*/\1/')
          go install github.com/go-task/task/v${major_version}/cmd/task@${{ inputs.task-version }}
        fi
    - run: |
        git config --global url.https://${{ inputs.github-token-for-downloading-private-go-modules }}@github.com/.insteadOf https://github.com/
      shell: bash
      if: ${{ inputs.github-token-for-downloading-private-go-modules != '' }}
    #
    # Verify downloaded dependencies.
    #
    - name: verify golang modules
      if: inputs.testing-type == 'security-golang-modules'
      shell: bash
      run: |
        go mod verify
    - uses: golang/govulncheck-action@v1.0.4
      if: inputs.testing-type == 'security-golang-modules'
      with:
        go-version-file: go.mod
        go-package: ./...
    #
    # Check for 'incorrect import order', let pipeline fail if true and provide
    # instruction to remediate it. Note: check is included in golangci-lint,
    # but it does not provide clarity how to resolve it when positive.
    #
    - name: gci
      if: inputs.gci == 'true' && inputs.testing-type == 'lint'
      shell: bash
      run: |
        task remote:gci --yes
    #
    # Code security scanning.
    #
    # * Grype
    #
    - uses: anchore/scan-action@v6.1.0
      if: inputs.token != '' && inputs.testing-type == 'security-grype'
      with:
        only-fixed: false
        output-format: table
        path: "."
        severity-cutoff: high
    #
    # * Trivy
    #
    - uses: 030/trivyignore-validator-action@v0.1.2
      if: inputs.token != '' && inputs.testing-type == 'security-trivy'
    - name: Log in to GitHub Packages Docker registry
      if: inputs.token != '' && inputs.testing-type == 'security-trivy'
      shell: bash
      run: |
        echo "${{ inputs.token }}" |\
          docker login ghcr.io -u ${{ github.actor }} --password-stdin
    #
    # Duplicated trivy-action parameters as GitHub actions do NOT support
    # anchors: https://github.com/actions/runner/issues/1182
    #
    - uses: aquasecurity/trivy-action@0.29.0
      if: inputs.token != '' && inputs.testing-type == 'security-trivy'
      env:
        TRIVY_DB_REPOSITORY: ${{ inputs.trivy-action-db }}
        TRIVY_JAVA_DB_REPOSITORY: ${{ inputs.trivy-action-java-db }}
        TRIVY_PASSWORD: ${{ inputs.token }}
        TRIVY_USERNAME: ${{ github.actor }}
      with:
        scan-type: "fs"
        scan-ref: "."
        exit-code: "1"
        ignore-unfixed: true
        severity: "CRITICAL,HIGH"
        trivyignores: .trivyignore
    - uses: aquasecurity/trivy-action@0.29.0
      if: inputs.token == '' && inputs.testing-type == 'security-trivy'
      env:
        TRIVY_DB_REPOSITORY: ${{ inputs.trivy-action-db }}
        TRIVY_JAVA_DB_REPOSITORY: ${{ inputs.trivy-action-java-db }}
      with:
        scan-type: "fs"
        scan-ref: "."
        exit-code: "1"
        ignore-unfixed: true
        severity: "CRITICAL,HIGH"
        trivyignores: .trivyignore
    #
    # Run golangci-lint.
    #
    - name: golangci-lint
      if: inputs.testing-type == 'lint'
      shell: bash
      env:
        BUILD_TAGS: ${{ inputs.build-tags }}
        GITHUB_TOKEN: ${{ inputs.token }}
        GOLANGCI_LINT_RUN_TIMEOUT_MINUTES: ${{ inputs.golangci-timeout }}
      run: |
        task remote:golangci-lint --yes
    #
    # Run MCVS-texttidy.
    #
    - name: mcvs-texttidy
      if: inputs.testing-type == 'mcvs-texttidy'
      shell: bash
      run: |
        task remote:mcvs-texttidy --yes
    #
    # Unit tests.
    #
    - name: unit tests
      if: inputs.testing-type == 'unit'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        task remote:test --yes
    #
    # Integration tests.
    #
    - name: integration tests
      if: inputs.testing-type == 'integration'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        task remote:test-integration --yes
    #
    # Coverage.
    #
    - name: code coverage
      if: inputs.testing-type == 'coverage'
      shell: bash
      env:
        CODE_COVERAGE_EXPECTED: ${{ inputs.code-coverage-expected }}
        CODE_COVERAGE_FILE_EXCLUSIONS: ${{ inputs.golang-unit-tests-exclusions }}
        GITHUB_TOKEN: ${{ inputs.token }}
        TEST_TIMEOUT: ${{ inputs.test-timeout }}
      run: |
        task remote:coverage --yes
    #
    # Component tests.
    #
    - name: component tests
      if: inputs.testing-type == 'component'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
      run: |
        task remote:test-component --yes
